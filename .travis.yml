# NOTE: The following complications are for Eldev itself.  Projects
# that _use_ Eldev can have it simpler.  Please see the homepage:
#
#     https://github.com/doublep/eldev#travis-ci

language: nix

jobs:
  include:
    - os: linux
      env: EMACS_CI=emacs-24-4
    - os: linux
      env: EMACS_CI=emacs-24-5
    - os: linux
      env: EMACS_CI=emacs-25-1
    - os: linux
      env: EMACS_CI=emacs-25-2
    - os: linux
      env: EMACS_CI=emacs-25-3
    - os: linux
      env: EMACS_CI=emacs-26-1
    - os: linux
      env: EMACS_CI=emacs-26-2
    - os: linux
      env: EMACS_CI=emacs-26-3
    - os: linux
      env: EMACS_CI=emacs-snapshot

    # Disabled for now as Nix doesn't really work on macOS version
    # that is on Travis (as of 11.06.2020 at least).
    # - os: osx
    #   env: EMACS_CI=emacs-26-3
    # - os: osx
    #   env: EMACS_CI=emacs-snapshot

  allow_failures:
    - env: EMACS_CI=emacs-snapshot

addons:
  apt:
    packages: texinfo
  homebrew:
    packages: texinfo

install:
  - bash <(curl https://raw.githubusercontent.com/purcell/nix-emacs-ci/master/travis-install)

script:
  - ELDEV_LOCAL=. ./bin/eldev -p -dtT test --omit-backtraces --expect 200
  - ELDEV_LOCAL=. ./bin/eldev -p -dtT test --test-type integration --omit-backtraces --expect 5
  # Also require that byte-compilation produces no warnings.  We'd use
  # Eldev itself to byte-compile, but that could hide some problems
  # (for Eldev itself, other packages should be fine) by indirectly
  # loading `.el' first.
  - emacs --batch --eval "(progn
                            (require 'bytecomp)
                            (let ((byte-compile-error-on-warn t))
                              (push default-directory load-path)
                              (unless (and (byte-compile-file \"eldev-util.el\")
                                           (byte-compile-file \"eldev.el\")
                                           (byte-compile-file \"eldev-ert.el\")
                                           (byte-compile-file \"eldev-buttercup.el\")
                                           (byte-compile-file \"eldev-plugins.el\"))
                                (kill-emacs 1))))"
  # Ensure that our tests can be compiled cleanly: warnings might
  # indicate something is wrong with the test.  Here we can already
  # use Eldev.
  - ELDEV_LOCAL=. ./bin/eldev -p -dtT compile --set test --warnings-as-errors
  # Run `relint' on Eldev's source code, more as a test of
  # Eldev--relint integration, because we use `rx' macro.
  - ELDEV_LOCAL=. ./bin/eldev -p -dtT lint re


branches:
  except:
    - future-doc
